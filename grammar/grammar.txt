Program ⟶ Declaration-list
Declaration-list ⟶ Declaration Declaration-list | EPSILON
Declaration ⟶ Declaration-initial Declaration-prime
Declaration-initial ⟶ Type-specifier ID #p_id
Declaration-prime ⟶ Fun-declaration-prime | Var-declaration-prime
Var-declaration-prime ⟶ ; #declare_var | [ NUM #p_num ] #declare_array ;
Fun-declaration-prime ⟶ #declaring_function #scope_enter ( #start_declaring_params Params #end_declaring_params ) #signature_declared #pop_params #pop_return_address Compound-stmt #default_return #function_declared #scope_exit
Type-specifier ⟶ int | void
Params ⟶ int ID #p_id Param-prime Param-list | void
Param-list ⟶ , Param Param-list | EPSILON
Param ⟶ Declaration-initial Param-prime
Param-prime ⟶ [ ] #declare_array_param | EPSILON #declare_int_param
Compound-stmt ⟶ { #scope_enter Declaration-list Statement-list #scope_exit }
Statement-list ⟶ Statement Statement-list | EPSILON
Statement ⟶ Expression-stmt | Compound-stmt | Selection-stmt | Iteration-stmt | Return-stmt
Expression-stmt ⟶ Expression ; #exp_end | break #break ; | ;
Selection-stmt ⟶ if ( Expression ) #save Statement #jpf_save else Statement #jp
Iteration-stmt ⟶ repeat #label Statement until ( Expression ) #jp_break #jpf
Return-stmt ⟶ return Return-stmt-prime
Return-stmt-prime ⟶ #return_void ; | Expression #return_int ;
Expression ⟶ Simple-expression-zegond | ID #p_id B
B ⟶ = Expression #assign | [ Expression #array_index ] H | Simple-expression-prime
H ⟶ = Expression #assign | G D C
Simple-expression-zegond ⟶ Additive-expression-zegond C
Simple-expression-prime ⟶ Additive-expression-prime C
C ⟶ Relop Additive-expression #compare | EPSILON
Relop ⟶ < #lt | == #eq
Additive-expression ⟶ Term D
Additive-expression-prime ⟶ Term-prime D
Additive-expression-zegond ⟶ Term-zegond D
D ⟶ Addop Term #arithmetic D | EPSILON
Addop ⟶ + #add | - #sub
Term ⟶ Factor G
Term-prime ⟶ Factor-prime G
Term-zegond ⟶ Factor-zegond G
G ⟶ * #mult Factor #arithmetic G | EPSILON
Factor ⟶ ( Expression ) | ID #p_id Var-call-prime | NUM #p_num
Var-call-prime ⟶ ( Args ) #call | Var-prime
Var-prime ⟶ [ Expression #array_index ] | EPSILON
Factor-prime ⟶ ( Args ) #call | EPSILON
Factor-zegond ⟶ ( Expression ) | NUM #p_num
Args ⟶ Arg-list | EPSILON
Arg-list ⟶ Expression #add_arg Arg-list-prime
Arg-list-prime ⟶ , Expression #add_arg Arg-list-prime | EPSILON